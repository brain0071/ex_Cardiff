<launch>
    <arg name="robot_name" default="/a1_gazebo"/>
    <arg name="rviz" default="false"/>
    <arg name="lite" default="false" />
    <arg name="ros_control_file" default="$(find a1_hl_control_config)/config/ros_control/ros_control.yaml" />
    <arg name="gazebo_world" default="$(find a1_hl_control_config)/worlds/outdoor.world" />
    <arg name="gui" default="true"/>
    <arg name="x_pose" default="0.0" />
    <arg name="y_pose" default="0.0" />
    <arg name="world_init_heading" default="0.0" />

    <param name="use_sim_time" value="true" />

    <arg name="mapping" default="false"/>
    <arg name="use_odometry" default="false"/>

    <arg name="localization" default="false"/>
    <arg name="map_pbstream_file" default="$(find test_a1_simulation_bringup)/maps/construction_map.bag.pbstream"/>

    <arg name="navigation" default="false"/>

    <include file="$(find a1_hl_control_config)/launch/bringup.launch">
        <arg name="robot_name" value="$(arg robot_name)"/>
        <arg name="gazebo" value="true"/>
        <arg name="lite" value="$(arg lite)"/>
        <arg name="rviz" value="$(arg rviz)"/>
        <arg name="joint_controller_topic" value="joint_group_position_controller/command"/>
        <arg name="hardware_connected" value="false"/>
        <arg name="publish_foot_contacts" value="false"/>
        <arg name="close_loop_odom" value="true"/>
        <arg name="publish_odom_tf" default="false"/>
    </include>

    <include file="$(find champ_gazebo)/launch/gazebo.launch">
        <arg name="robot_name" value="$(arg robot_name)"/>
        <arg name="lite" value="$(arg lite)"/>
        <arg name="ros_control_file" value="$(arg ros_control_file)"/>
        <arg name="gazebo_world" value="$(arg gazebo_world)"/>
        <arg name="world_init_x" value="$(arg x_pose)" />
        <arg name="world_init_y" value="$(arg y_pose)" />
        <arg name="world_init_heading" value="$(arg world_init_heading)" />
        <arg name="gui" value="$(arg gui)" />
    </include>


    <node pkg="a1_pose" type="imu_dummy_tf.py" name="imu_to_imu_dummy_tf" output="screen">
        <param name="z_offset" value="-0.2"/>
        <param name="parent_frame" value="a1_gazebo/imu_link"/>
        <param name="child_frame" value="a1_gazebo/imu_link_dummy"/>
    </node>

    <!-- imu transform -->
    <node pkg="imu_transformer" type="imu_transformer_node" name="imu_transformer_node" output="screen">
        <remap from="imu_in/data" to="/a1_gazebo/trunk_imu"/>
        <remap from="imu_out/data" to="/a1_gazebo/imu/data"/>
        <param name="target_frame" value="a1_gazebo/imu_link_dummy"/>
    </node>

    <!-- Mapping! -->
    <group if="$(arg mapping)">
        <group unless="$(arg localization)">
            <group unless="$(arg navigation)">
                <group if="$(arg use_odometry)">
                    <!-- Start Google Cartographer node with custom configuration file-->
                    <node name="cartographer_node" pkg="cartographer_ros" type="cartographer_node" args="
                -configuration_directory
                    $(find test_a1_simulation_bringup)/config
                -configuration_basename mapping_config_odometry.lua" output="screen">
                        <remap from="scan" to="/a1_gazebo/scan"/>
                        <remap from="odom" to="/a1_gazebo/odom"/>
                        <remap from="imu" to="/a1_gazebo/imu/data"/>
                    </node>
                    <!-- Additional node which converts Cartographer map into ROS occupancy grid map. Not used and can be skipped in this case -->
                    <node name="cartographer_occupancy_grid_node" pkg="cartographer_ros" type="cartographer_occupancy_grid_node" args="-resolution 0.05" />
                </group>

                <group unless="$(arg use_odometry)">
                    <!-- Start Google Cartographer node with custom configuration file-->
                    <node name="cartographer_node" pkg="cartographer_ros" type="cartographer_node" args="
                -configuration_directory
                    $(find test_a1_simulation_bringup)/config
                -configuration_basename mapping_config.lua" launch-prefix="bash -c 'sleep 15; $0 $@' " output="screen">
                        <remap from="scan" to="/a1_gazebo/scan"/>
                        <remap from="odom" to="/a1_gazebo/odom"/>
                        <remap from="imu" to="/a1_gazebo/imu/data"/>
                    </node>
                    <!-- Additional node which converts Cartographer map into ROS occupancy grid map. Not used and can be skipped in this case -->
                    <node name="cartographer_occupancy_grid_node" pkg="cartographer_ros" type="cartographer_occupancy_grid_node" args="-resolution 0.05" launch-prefix="bash -c 'sleep 15; $0 $@' " />
                </group>
            </group>
        </group>
    </group>

    <!-- Localization! -->
    <group if="$(arg localization)">
        <group unless="$(arg mapping)">
            <group unless="$(arg navigation)">
                <group if="$(arg use_odometry)">
                    <!-- Start Google Cartographer node with custom configuration file-->
                    <node name="cartographer_node" pkg="cartographer_ros" type="cartographer_node" args="
                -configuration_directory
                    $(find test_a1_simulation_bringup)/config
                -configuration_basename localization_config_odometry.lua
                -load_state_filename $(arg map_pbstream_file)" output="screen">
                        <remap from="scan" to="/a1_gazebo/scan"/>
                        <remap from="odom" to="/a1_gazebo/odom"/>
                        <remap from="imu" to="/a1_gazebo/imu/data"/>
                    </node>
                    <!-- Additional node which converts Cartographer map into ROS occupancy grid map. Not used and can be skipped in this case -->
                    <node name="cartographer_occupancy_grid_node" pkg="cartographer_ros" type="cartographer_occupancy_grid_node" args="-resolution 0.05" />
                </group>

                <group unless="$(arg use_odometry)">
                    <!-- Start Google Cartographer node with custom configuration file-->
                    <node name="cartographer_node" pkg="cartographer_ros" type="cartographer_node" args="
                -configuration_directory
                    $(find test_a1_simulation_bringup)/config
                -configuration_basename localization_config.lua
                -load_state_filename $(arg map_pbstream_file)" launch-prefix="bash -c 'sleep 15; $0 $@' " output="screen">
                        <remap from="scan" to="/a1_gazebo/scan"/>
                        <remap from="odom" to="/a1_gazebo/odom"/>
                        <remap from="imu" to="/a1_gazebo/imu/data"/>
                    </node>
                    <!-- Additional node which converts Cartographer map into ROS occupancy grid map. Not used and can be skipped in this case -->
                    <node name="cartographer_occupancy_grid_node" pkg="cartographer_ros" type="cartographer_occupancy_grid_node" args="-resolution 0.05" launch-prefix="bash -c 'sleep 15; $0 $@' " />
                </group>
            </group>
        </group>
    </group>



    <!-- Navigation -->

    <group if="$(arg navigation)">
        <group unless="$(arg mapping)">
            <group unless="$(arg localization)">

                <group if="$(arg use_odometry)">
                    <!-- Start Google Cartographer node with custom configuration file-->
                    <node name="cartographer_node" pkg="cartographer_ros" type="cartographer_node" args="
                -configuration_directory
                    $(find test_a1_simulation_bringup)/config
                -configuration_basename localization_config_odometry.lua
                -load_state_filename $(arg map_pbstream_file)" output="screen">
                        <remap from="scan" to="/a1_gazebo/scan"/>
                        <remap from="odom" to="/a1_gazebo/odom"/>
                        <remap from="imu" to="/a1_gazebo/imu/data"/>
                    </node>
                    <!-- Additional node which converts Cartographer map into ROS occupancy grid map. Not used and can be skipped in this case -->
                    <node name="cartographer_occupancy_grid_node" pkg="cartographer_ros" type="cartographer_occupancy_grid_node" args="-resolution 0.05" />
                </group>

                <group unless="$(arg use_odometry)">
                    <!-- Start Google Cartographer node with custom configuration file-->
                    <node name="cartographer_node" pkg="cartographer_ros" type="cartographer_node" args="
                -configuration_directory
                    $(find test_a1_simulation_bringup)/config
                -configuration_basename localization_config.lua
                -load_state_filename $(arg map_pbstream_file)" launch-prefix="bash -c 'sleep 15; $0 $@' " output="screen">
                        <remap from="scan" to="/a1_gazebo/scan"/>
                        <remap from="odom" to="/a1_gazebo/odom"/>
                        <remap from="imu" to="/a1_gazebo/imu/data"/>
                    </node>
                    <!-- Additional node which converts Cartographer map into ROS occupancy grid map. Not used and can be skipped in this case -->
                    <node name="cartographer_occupancy_grid_node" pkg="cartographer_ros" type="cartographer_occupancy_grid_node" args="-resolution 0.05" launch-prefix="bash -c 'sleep 15; $0 $@' " />
                </group>


                <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
                    <rosparam file="$(find a1_hl_control_config)/config/move_base/costmap_common_params.yaml" command="load" ns="global_costmap" />
                    <rosparam file="$(find a1_hl_control_config)/config/move_base/costmap_common_params.yaml" command="load" ns="local_costmap" />
                    <rosparam file="$(find a1_hl_control_config)/config/move_base/local_costmap_params.yaml" command="load" />
                    <rosparam file="$(find a1_hl_control_config)/config/move_base/global_costmap_params.yaml" command="load" />
                    <rosparam file="$(find a1_hl_control_config)/config/move_base/base_local_planner_holonomic_params.yaml" command="load" />
                    <rosparam file="$(find a1_hl_control_config)/config/move_base/move_base_params.yaml" command="load" />

                    <!-- explicitly define frame ids for movebase -->
                    <param name="global_costmap/global_frame" value="map"/>
                    <param name="global_costmap/robot_base_frame" value="a1_gazebo/base_footprint"/>
                    <param name="global_costmap/2d_obstacles_layer/scan/topic" value="/a1_gazebo/scan"/>
                    <param name="global_costmap/3d_obstacles_layer/depth/topic" value="/a1_gazebo/d435/depth/points"/>
                    <param name="local_costmap/global_frame" value="a1_gazebo/odom"/>
                    <param name="local_costmap/robot_base_frame" value="a1_gazebo/base_footprint"/>
                    <param name="local_costmap/2d_obstacles_layer/scan/topic" value="/a1_gazebo/scan"/>
                    <param name="local_costmap/3d_obstacles_layer/depth/topic" value="/a1_gazebo/d435/depth/points"/>

                    <remap from="cmd_vel" to="/a1_gazebo/cmd_vel"/>
                </node>
            </group>
        </group>
    </group>


</launch>